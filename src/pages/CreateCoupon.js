import React, { useEffect, useState } from 'react'
import Topbar from '../components/Layout/Topbar'
import { Sidebar } from '../components/Layout/Sidebar'
import toast, { Toaster } from 'react-hot-toast'
import { db } from '../firebase.config'
import {
	collection,
	deleteDoc,
	doc,
	getDocs,
	setDoc,
	updateDoc
} from 'firebase/firestore'
import { useNavigate } from 'react-router-dom'
import CouponForm from '../components/CreateCoupon/CouponForm'
import CouponList from '../components/CreateCoupon/CouponList'

const CreateCoupon = () => {
	const [couponID, setCouponID] = useState("")
	const [couponIDdetails, setcouponIDdetails] = useState("manual")
	const [couponName, setCouponName] = useState("")
	const [couponAmountPercentage, setCouponAmountPercentage] = useState("")
	const [couponAmountPrice, setCouponAmountPrice] = useState("")
	const [couponCode, setCouponCode] = useState("")
	const [couponAmountDetails, setCouponAmountDetails] = useState("percentage")
	const [couponExpireDate, setcouponExpireDate] = useState("")
	const [loading, setLoading] = useState(false)
	const [coupon, setCoupon] = useState([])

	const navigate = useNavigate()

	// 🔸 ORIGINAL handleCouponCode untouched
	const handleCouponCode = async () => {
		setLoading(true);

		if (!couponName.trim()) {
			setLoading(false);
			return toast.error("Please fill Coupon Name");
		}
		if (couponAmountDetails === "percentage" && !couponAmountPercentage.trim()) {
			setLoading(false);
			return toast.error("Please fill Coupon Percentage");
		}
		if (couponAmountDetails === "price" && !couponAmountPrice.trim()) {
			setLoading(false);
			return toast.error("Please fill Coupon Price");
		}
		if (!couponCode.trim()) {
			setLoading(false);
			return toast.error("Please fill Coupon Code");
		}
		if (!couponExpireDate.trim()) {
			setLoading(false);
			return toast.error("Please fill Coupon Expire Date");
		}

		const dateStr = new Date().toISOString().slice(0, 10).replace(/-/g, "");
		const randomSuffix = Math.floor(10000 + Math.random() * 90000);
		const autoGeneratedID = `${dateStr}${randomSuffix}`;

		const finalCouponID = (couponIDdetails === "automatic") ? autoGeneratedID : couponID;

		if (!finalCouponID.trim()) {
			setLoading(false);
			return toast.error("Coupon ID is missing");
		}

		const date = new Date();

		const couponData = {
			createdAtDate: date,
			couponID: finalCouponID,
			couponName: couponName,
			couponAmount: (couponAmountDetails === "percentage") ? couponAmountPercentage : couponAmountPrice,
			couponCode: couponCode,
			couponExpireDate: couponExpireDate,
			couponAmountDetails: couponAmountDetails,
			couponStatus: "Active"
		};

		try {
			await setDoc(doc(db, "Coupon", finalCouponID), couponData);
			toast.success("Coupon added successfully!");
			setTimeout(() => {
				navigate("/creatcoupon");
			}, 1000);
		} catch (error) {
			console.error("Error adding coupon:", error);
			toast.error("Something went wrong. Please try again.");
		}
		setLoading(false);
	};

	const fetchProductList = async () => {
		try {
			const q = collection(db, "Coupon");
			const querySnapshot = await getDocs(q);

			const fetchedCoupons = [];
			querySnapshot.forEach((doc) => {
				fetchedCoupons.push({ id: doc.id, ...doc.data() });
			});

			setCoupon(fetchedCoupons);
		} catch (error) {
			if (error.code === 'failed-precondition' || error.code === 'permission-denied') {
				console.error("⚠️ Firestore requires a composite index for this query.");
				console.error("👉 Follow this link to create it in the Firebase Console:", error.message);
			} else {
				console.error("❌ Error fetching coupons:", error);
			}
		}
	};

	const updateExpiredCoupons = async () => {
		try {
			const q = collection(db, "Coupon");
			const querySnapshot = await getDocs(q);
			const today = new Date();

			querySnapshot.forEach(async (docSnap) => {
				const data = docSnap.data();
				const expireDate = new Date(data?.couponExpireDate);

				if (expireDate < today && data?.couponStatus !== "Expired") {
					const couponRef = doc(db, "Coupon", docSnap.id);
					await updateDoc(couponRef, {
						couponStatus: "Expired",
					});
				}
			});
		} catch (error) {
			console.error("Error auto-updating expired coupons:", error);
		}
	};

	const deleteOrder = async (id) => {
		try {
			await deleteDoc(doc(db, "Coupon", id));
			toast.success("Coupon Deleted");
			await fetchProductList(); // Refresh state, avoid reload
		} catch (error) {
			console.error("Error deleting coupon:", error);
			toast.error("Something went wrong");
		}
	};

	useEffect(() => {
		const runAll = async () => {
			await updateExpiredCoupons(); // first mark expired
			await fetchProductList();     // then show updated list
		};
		runAll();
	}, []);

	return (
		<div className='bg-gray-100 flex'>
			<Toaster />
			<Sidebar />
			<div className='h-[100vh] w-full overflow-y-scroll flex flex-1 flex-col'>
				<Topbar />
				<div className='flex  justify-start items-start gap-10 flex-col px-10'>
					<CouponForm
						couponID={couponID}
						setCouponID={setCouponID}
						couponIDdetails={couponIDdetails}
						setcouponIDdetails={setcouponIDdetails}
						couponName={couponName}
						setCouponName={setCouponName}
						couponAmountPercentage={couponAmountPercentage}
						setCouponAmountPercentage={setCouponAmountPercentage}
						couponAmountPrice={couponAmountPrice}
						setCouponAmountPrice={setCouponAmountPrice}
						couponCode={couponCode}
						setCouponCode={setCouponCode}
						couponAmountDetails={couponAmountDetails}
						setCouponAmountDetails={setCouponAmountDetails}
						couponExpireDate={couponExpireDate}
						setcouponExpireDate={setcouponExpireDate}
						loading={loading}
						handleCouponCode={handleCouponCode}
					/>

					<CouponList coupon={coupon} deleteOrder={deleteOrder} />
				</div>
			</div>
		</div>
	);
};

export default CreateCoupon;
